mysql -u dac -p

SHOW DATABASES;

USE hr;

SHOW TABLES;

DESCRIBE employees;

1)
SELECT FIRST_NAME,LAST_NAME
FROM employees
WHERE 
FIRST_NAME LIKE 'S%' AND
LAST_NAME LIKE 'S%';

2)
SELECT LCASE(FIRST_NAME)
FROM employees;

SELECT LEFT(FIRST_NAME,1)
FROM employees;

SELECT LCASE(LEFT(FIRST_NAME,1))
FROM employees;

SELECT SUBSTRING(FIRST_NAME,1,1)
FROM employees;

SELECT LENGTH(FIRST_NAME)
FROM employees;

SELECT 
CONCAT(UCASE(LEFT(FIRST_NAME,1)),LCASE(SUBSTRING(FIRST_NAME,2,LENGTH(FIRST_NAME)))) AS FIRTS_NAME,
CONCAT(UCASE(LEFT(LAST_NAME,1)),LCASE(SUBSTRING(LAST_NAME,2,LENGTH(LAST_NAME)))) AS FIRST_NAME
FROM employees;

3)
SELECT LEFT(JOB_TITLE,1)
FROM jobs;

4)

SELECT SUBSTRING(LAST_NAME,4,1) AS LAST_NAME
FROM employees;

SELECT FIRST_NAME,LAST_NAME,LENGTH(FIRST_NAME)
FROM employees
WHERE SUBSTRING(LAST_NAME,4,1)='b';

6)
SELECT FIRST_NAME,SALARY,ROUND(SALARY,-3) AS 'ROUND SALARY THOUSAND'
FROM employees;

7)
SELECT MANAGER_ID,EMPLOYEE_ID
FROM employees;

SELECT MANAGER_ID,COUNT(EMPLOYEE_ID) AS 'MANAGED EMPLOYEE'
FROM employees
GROUP BY MANAGER_ID;

8)


9)
SELECT COUNTRY_ID,CITY FROM locations;

SELECT COUNTRY_ID,COUNT(CITY) 
FROM locations
GROUP BY COUNTRY_ID;

9)
SELECT EMPLOYEE_ID,END_DATE 
FROM job_history;

10)
SELECT DEPARTMENT_ID,AVG(SALARY)
FROM employees
WHERE COMMISSION_PCT !=0
GROUP BY DEPARTMENT_ID;

11)
SELECT JOB_ID,COUNT(EMPLOYEE_ID),SUM(SALARY),MAX(SALARY),MIN(SALARY),
MAX(SALARY)-MIN(SALARY) AS DIFFERENCE
FROM employees
GROUP BY JOB_ID;

12)
SELECT JOB_ID,AVG(SALARY) 
FROM employees
GROUP BY JOB_ID
HAVING AVG(SALARY)>10000;

13)
SELECT YEAR(HIRE_DATE) FROM employees;

SELECT YEAR(HIRE_DATE) AS YEAR
FROM employees
GROUP BY YEAR
HAVING COUNT(EMPLOYEE_ID)>10;

14)
SELECT DEPARTMENT_ID
FROM employees
WHERE COMMISSION_PCT !=0
GROUP BY (DEPARTMENT_ID)
HAVING COUNT(EMPLOYEE_ID)>5;

15)
SELECT EMPLOYEE_ID
FROM job_history
GROUP BY EMPLOYEE_ID
HAVING COUNT(EMPLOYEE_ID)>1;

16)
SELECT JOB_ID
FROM job_history
WHERE END_DATE-START_DATE >100
GROUP BY JOB_ID
HAVING COUNT(EMPLOYEE_ID)>1;

17)
SELECT DEPARTMENT_ID,YEAR(HIRE_DATE) AS YEAR,COUNT(EMPLOYEE_ID)
FROM employees
GROUP BY DEPARTMENT_ID,YEAR;

18)Display departments where any manager is managing more than 5 employees.

SELECT MANAGER_ID,COUNT(EMPLOYEE_ID),DEPARTMENT_ID
FROM employees
GROUP BY MANAGER_ID,DEPARTMENT_ID
HAVING COUNT(MANAGER_ID)>=5;

19)
SELECT FIRST_NAME,ADDDATE(HIRE_DATE,INTERVAL 30 DAY) AS 'FIRST SALARY DATE'
FROM employees;
--OR-- WE CAN USE DATE_ADD() FUNCTION INSTEAD OF ADDDATE

20)
SELECT EMPLOYEE_ID,HIRE_DATE,CURRENT_DATE,FROM_DAYS(DATEDIFF(CURRENT_DATE,HIRE_DATE)) AS 'EXPERIENCE IN DAYS' 
FROM employees;

21)
SELECT FIRST_NAME,HIRE_DATE
FROM employees
WHERE YEAR(HIRE_DATE)=2001;

22)
SELECT * FROM employees
WHERE YEAR(HIRE_DATE)=YEAR(CURRENT_DATE);

23)
SELECT DATEDIFF(CURRENT_DATE,'2011-01-01') 'DAYS FROM 2011-01-01' FROM DUAL;

24)
SELECT MONTH(HIRE_DATE) AS MONTH,COUNT(EMPLOYEE_ID) AS 'NUMBER OF EMPLOYEE0S JOINED'
FROM employees
GROUP BY MONTH(HIRE_DATE);

25)
SELECT DAY(CURRENT_DATE) FROM DUAL;

SELECT COUNT(EMPLOYEE_ID)
FROM employees
WHERE DAY(HIRE_DATE)>15;

26) Display details of departments in which the maximum salary is more than 10000.

SELECT e.DEPARTMENT_ID,d.DEPARTMENT_NAME,d.MANAGER_ID,d.LOCATION_ID,e.SALARY AS 'MAX SALARY',e.EMPLOYEE_ID
FROM employees e INNER JOIN departments d
ON e.DEPARTMENT_ID = d.DEPARTMENT_ID
GROUP BY e.DEPARTMENT_ID
HAVING MAX(e.SALARY)>10000;

27) Display details of departments managed by ‘Smith’ -- USE Jennifer

SELECT d.* 
FROM employees e INNER JOIN departments d
ON e.DEPARTMENT_ID = d.DEPARTMENT_ID
WHERE e.FIRST_NAME = 'Jennifer'; 

+---------------+-----------------+------------+-------------+
| DEPARTMENT_ID | DEPARTMENT_NAME | MANAGER_ID | LOCATION_ID |
+---------------+-----------------+------------+-------------+
|            50 | Shipping        |        121 |        1500 |
|            10 | Administration  |        200 |        1700 |
+---------------+-----------------+------------+-------------+

28) Display jobs into which employees joined in the current year

SELECT DISTINCT j.JOB_TITLE,YEAR(HIRE_DATE)
FROM employees e INNER JOIN jobs j
ON e.JOB_ID = j.JOB_ID
WHERE YEAR(e.HIRE_DATE) = YEAR(CURRENT_DATE);  -- EMPTY SET

29) Display employees who did not do any job in the past.

SELECT e.FIRST_NAME AS EMPLOYEE_NAME
FROM employees e INNER JOIN job_history jh
ON e.EMPLOYEE_ID = jh.EMPLOYEE_ID;

30) Display job title and average salary for employees who did a job in the past.

SELECT j.JOB_TITLE,MAX_SALARY,MIN_SALARY,(MAX_SALARY+MIN_SALARY)/2 AS AVERAGE_SALARY
FROM job_history jh INNER JOIN jobs j
ON jh.JOB_ID = j.JOB_ID;

31) Display details of manager who manages more than 5 employees.

SELECT DISTINCT MANAGER_ID,COUNT(EMPLOYEE_ID),DEPARTMENT_ID
FROM employees
GROUP BY MANAGER_ID,DEPARTMENT_ID
HAVING COUNT(MANAGER_ID)>=5;

32) Display the departments into which no employee joined in last two years
	?

33) Display the details of departments in which the max salary is greater than 10000 for employees who did a job in the past.

SELECT e.DEPARTMENT_ID,d.DEPARTMENT_NAME,d.MANAGER_ID,d.LOCATION_ID,e.SALARY AS 'MAX SALARY',e.EMPLOYEE_ID
FROM employees e INNER JOIN departments d
ON e.DEPARTMENT_ID = d.DEPARTMENT_ID
INNER JOIN job_history jh
ON e.EMPLOYEE_ID = jh.EMPLOYEE_ID
GROUP BY e.DEPARTMENT_ID
HAVING MAX(e.SALARY)>10000; 

--34) Display details of current job for employees who worked as IT Programmers in the past. 

SELECT jh.EMPLOYEE_ID,e.FIRST_NAME,jh.JOB_ID AS 'PAST JOB ID',j.JOB_TITLE AS 'PAST JOB TITLE',e.JOB_ID AS 'CURRENT JOB ID',j1.JOB_TITLE AS 'CURRENT JOB TITLE' 
FROM job_history jh INNER JOIN employees e
ON jh.EMPLOYEE_ID = e.EMPLOYEE_ID 
INNER JOIN jobs j
ON jh.JOB_ID = j.JOB_ID
INNER JOIN jobs j1
ON e.JOB_ID = j1.JOB_ID
WHERE jh.JOB_ID = 'IT_PROG';


--35) Display third highest salary of all employees

SELECT * FROM employees
WHERE SALARY = (SELECT DISTINCT SALARY FROM EMPLOYEES ORDER BY SALARY DESC LIMIT 2,1);


--36) Display details of the employees where commission percentage is null and salary in the range 5000 to 10000 and department is 30.

SELECT * FROM employees
WHERE COMMISSION_PCT = 0 AND SALARY BETWEEN 5000 AND 10000 AND DEPARTMENT_ID = 30; -- EMPTY SET

USE spj;

--1) Display all the Part names starting with the letter ‘S’.

SELECT Pname FROM P 
WHERE Pname LIKE 'S%';


--2) Display all the Suppliers, belonging to cities starting with the letter ‘L’.

SELECT * FROM S
WHERE City LIKE 'L%';


--3) Display all the Projects, with the third letter in JNAME as ‘n’.

SELECT * FROM J 
WHERE Jname LIKE '__n%';


--4) Display all the Supplier names with the initial letter capital.

SELECT CONCAT(UPPER(LEFT(Sname,1)),SUBSTRING(Sname,2,LENGTH(Sname))) AS 'SUPPLIER NAME' FROM S;


--5) Display all the Supplier names in upper case.

SELECT UPPER(Sname) FROM S;

--6) Display all the Supplier names in lower case.

SELECT LOWER(Sname) FROM S;

--7) Display all the Supplier names padded to 25 characters, with spaces on the left.

SELECT LPAD(Sname,25," ") FROM S;

--8) Display all the Supplier names (with ‘la’ replaced by ‘ro’). HINT: REPLACE.

SELECT REPLACE(Sname,'la','ro') FROM S;


--9) Implement the above command such that ‘l’ is replaced with ‘r’ and ‘a’ is replaced with ‘o’.

SELECT REPLACE(REPLACE(Sname,'l','r'),'a','o') FROM S;


--10) Display the Supplier names and the lengths of the names

SELECT Sname,LENGTH(Sname) FROM S;

--11) Use the soundex function to search for a supplier by the name of ‘BLOKE’.

--12) Display the Supplier name and the status (as Ten, Twenty, Thirty, etc.).

--13) Display the current day (e.g. Thursday).
SELECT DAYNAME(CURRENT_DATE);


--14) Display the minimum Status in the Supplier table.

SELECT * FROM S
WHERE Status <= ANY(SELECT MIN(Status) FROM S); 

--15) Display the maximum Weight in the Parts table.

SELECT MIN(WEIGHT) FROM P;


--16) Display the average Weight of the Parts.

SELECT AVG(WEIGHT) FROM P;

--17) Display the total Quantity sold for part ‘P1’.

SELECT SUM(QTY) FROM sp
WHERE `P#`='P1';


--18) Display the total Quantity sold for each part.

SELECT `P#`,QTY FROM sp
GROUP BY `P#`;


--19) Display the average Quantity sold for each part.

SELECT `P#`, AVG(QTY) FROM sp
GROUP BY `P#`;

--20) Display the maximum Quantity sold for each part, provided the maximum Quantity is greater than 800.

SELECT `P#`,MAX(QTY) FROM sp
GROUP BY `P#`
HAVING MAX(QTY)>=800;

--21) Display the Status and the count of Suppliers with that Status.

SELECT Status,COUNT(Sname) FROM S
GROUP BY Status;

--22) Display the count of Projects going on in different cities.

SELECT City,COUNT(Jname) FROM J
GROUP BY City;

--23) What is the difference between COUNT(Status) and
COUNT(*) ?
    NO DIFFERENCE 

--24) Display the Status and the Count of Suppliers with that Status in the following formatas shown below:-
Status Count
Ten 1
Twenty 2
Thirty 3






































